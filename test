local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Tab Example", 4483362458) -- Title, Image

local sigma = true

if sigma then
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

local animationBlockEnabled = false -- Variable to track if the toggle is enabled

-- Function to block the animation
local function onAnimationPlayed(animationTrack)
    if not animationBlockEnabled then
        return -- Do nothing if the toggle is off
    end

    local animationId = animationTrack.Animation.AnimationId
    local blockedAnimationId = "rbxassetid://10470389827"
    
    if animationId == blockedAnimationId then
        -- Stop the animation if it matches the blocked animation ID
        animationTrack:Stop()
        print("Blocked animation with ID:", animationId)
    end
end

-- Monitor animation tracks being added to the Humanoid
local function monitorAnimations()
    local humanoid = Character:WaitForChild("Humanoid")
    humanoid.AnimationPlayed:Connect(onAnimationPlayed)
end

-- Ensure the function runs even if the character respawns
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    monitorAnimations()
end)

-- Start monitoring animations
monitorAnimations()

-- Create the toggle
local Toggle = Tab:CreateToggle({
    Name = "Invisible Block",
    CurrentValue = false, -- Default value (off)
    Flag = "AnimationBlockToggle", -- Unique identifier for the toggle
    Callback = function(Value)
        animationBlockEnabled = Value -- Enable or disable the blocking
        print("Invisible Block is now", Value and "ON" or "OFF")
    end,
})
end


